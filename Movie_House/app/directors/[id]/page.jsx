
import Link from 'next/link';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { MovieCard } from '@/components/MovieCard';
import { ArrowLeft } from 'lucide-react';
import { directors as allDirectors, movies as allMovies } from '@/lib/data'; // Import all data
import { notFound } from 'next/navigation'; // Import notFound

// Fetches data for a single director. In a real app, this might fetch from an API/DB.
// For SSG, this runs at build time for each path generated by generateStaticParams.
async function getDirectorData(directorId) {
  // Simulate data fetching delay if needed: await new Promise(res => setTimeout(res, 1000));
  const director = allDirectors.find((d) => d.id === directorId);

  // If director not found by ID, return null.
  if (!director) {
    return null;
  }

  // Find movies directed by this director.
  const directorMovies = allMovies.filter((movie) => movie.directorId === directorId);

  return {
    director,
    movies: directorMovies,
  };
}

// Statically generate routes for each director at build time.
export async function generateStaticParams() {
  const paths = allDirectors.map((director) => ({
    id: director.id, // Param name 'id' matches the dynamic route segment [id]
  }));
  return paths;
}

// Optional: Configure ISR revalidation frequency (e.g., every 60 seconds).
export const revalidate = 60;

// The Page component is an async Server Component.
export default async function DirectorDetailsPage({ params }) {
  const directorId = params.id;
  const data = await getDirectorData(directorId);

   // If data is null (director not found), explicitly call notFound()
   if (!data) {
     notFound();
   }

  const { director, movies: directorMovies } = data;

  return (
    <div className="container mx-auto py-8 px-4">
      <Button variant="ghost" asChild className="mb-4">
        {/* Link back to the server-rendered directors list */}
        <Link href="/directors">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Directors
        </Link>
      </Button>

      <Card>
        <CardHeader>
          <CardTitle className="text-3xl font-bold">{director.name}</CardTitle>
          <CardDescription className="text-muted-foreground pt-2">Director</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="mb-6">{director.biography}</p>

          <h2 className="text-2xl font-semibold mb-4 mt-8">Movies Directed</h2>
          {directorMovies && directorMovies.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {directorMovies.map((movie) => (
                <MovieCard key={movie.id} movie={movie} />
              ))}
            </div>
          ) : (
            <p className="text-muted-foreground">No movies found for this director.</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
